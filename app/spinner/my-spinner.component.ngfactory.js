/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '../../../app/spinner/my-spinner.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from './my-spinner.component.css.shim';
import * as import10 from '../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import11 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import12 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/common/src/directives/ng_class';
export var Wrapper_MySpinner = (function () {
    function Wrapper_MySpinner() {
        this._changed = false;
        this.context = new import0.MySpinner();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
    }
    Wrapper_MySpinner.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_MySpinner.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_MySpinner.prototype.check_maxValue = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.maxValue = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_MySpinner.prototype.check_minValue = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.minValue = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_MySpinner.prototype.check_counterValue = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.counterValue = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_MySpinner.prototype.check_bdgClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.bdgClass = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_MySpinner.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_MySpinner.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_MySpinner.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_MySpinner.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.counterChange.subscribe(_eventHandler.bind(view, 'counterChange')));
        }
    };
    return Wrapper_MySpinner;
}());
var renderType_MySpinner_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_MySpinner_Host0 = (function (_super) {
    __extends(View_MySpinner_Host0, _super);
    function View_MySpinner_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MySpinner_Host0, renderType_MySpinner_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
    }
    View_MySpinner_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'div', new import3.InlineArray2(2, 'mySpinner', ''), rootSelector, null);
        this.compView_0 = new View_MySpinner0(this.viewUtils, this, 0, this._el_0);
        this._MySpinner_0_3 = new Wrapper_MySpinner();
        this.compView_0.create(this._MySpinner_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._MySpinner_0_3.context);
    };
    View_MySpinner_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.MySpinner) && (0 === requestNodeIndex))) {
            return this._MySpinner_0_3.context;
        }
        return notFoundResult;
    };
    View_MySpinner_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._MySpinner_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    };
    View_MySpinner_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._MySpinner_0_3.ngOnDestroy();
    };
    View_MySpinner_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_MySpinner_Host0;
}(import2.AppView));
export var MySpinnerNgFactory = new import8.ComponentFactory('[mySpinner]', View_MySpinner_Host0, import0.MySpinner);
var styles_MySpinner = [import9.styles];
var renderType_MySpinner = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.Emulated, styles_MySpinner, {});
export var View_MySpinner0 = (function (_super) {
    __extends(View_MySpinner0, _super);
    function View_MySpinner0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_MySpinner0, renderType_MySpinner, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_22 = import1.UNINITIALIZED;
        this._map_23 = import3.pureProxy1(function (p0) {
            return { disabled: p0 };
        });
        this._expr_24 = import1.UNINITIALIZED;
        this._expr_25 = import1.UNINITIALIZED;
        this._expr_26 = import1.UNINITIALIZED;
        this._map_27 = import3.pureProxy1(function (p0) {
            return { disabled: p0 };
        });
    }
    View_MySpinner0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray4(4, 'class', 'btn-group-vertical votingWdt center-block', 'role', 'group'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_0, 'button', new import3.InlineArray2(2, 'class', 'btn btn-sm btn-default'), null);
        this._NgClass_2_3 = new import10.Wrapper_NgClass(this.parentView.injectorGet(import11.IterableDiffers, this.parentIndex), this.parentView.injectorGet(import12.KeyValueDiffers, this.parentIndex), new import13.ElementRef(this._el_2), this.renderer);
        this._text_3 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_4 = import3.createRenderElement(this.renderer, this._el_2, 'span', new import3.InlineArray2(2, 'class', 'glyphicon glyphicon-menu-up'), null);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._text_6 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_7 = import3.createRenderElement(this.renderer, this._el_0, 'button', new import3.InlineArray2(2, 'class', 'btn btn-sm btn-default disabled'), null);
        this._text_8 = this.renderer.createText(this._el_7, '\n        ', null);
        this._el_9 = import3.createRenderElement(this.renderer, this._el_7, 'span', import3.EMPTY_INLINE_ARRAY, null);
        this._text_10 = this.renderer.createText(this._el_7, '\n        ', null);
        this._el_11 = import3.createRenderElement(this.renderer, this._el_7, 'span', new import3.InlineArray2(2, 'class', 'badge'), null);
        this._text_12 = this.renderer.createText(this._el_11, '', null);
        this._text_13 = this.renderer.createText(this._el_7, '\n    ', null);
        this._text_14 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_15 = import3.createRenderElement(this.renderer, this._el_0, 'button', new import3.InlineArray2(2, 'class', 'btn btn-sm btn-default'), null);
        this._NgClass_15_3 = new import10.Wrapper_NgClass(this.parentView.injectorGet(import11.IterableDiffers, this.parentIndex), this.parentView.injectorGet(import12.KeyValueDiffers, this.parentIndex), new import13.ElementRef(this._el_15), this.renderer);
        this._text_16 = this.renderer.createText(this._el_15, '\n        ', null);
        this._el_17 = import3.createRenderElement(this.renderer, this._el_15, 'span', new import3.InlineArray2(2, 'class', 'glyphicon glyphicon-menu-down'), null);
        this._text_18 = this.renderer.createText(this._el_15, '\n    ', null);
        this._text_19 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray4(4, 'swipedown', null, 'swipeup', null), this.eventHandler(this.handleEvent_0));
        var disposable_1 = import3.subscribeToRenderElement(this, this._el_2, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_2));
        var disposable_2 = import3.subscribeToRenderElement(this, this._el_15, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_15));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._text_14,
            this._el_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._text_19
        ]), [
            disposable_0,
            disposable_1,
            disposable_2
        ]);
        return null;
    };
    View_MySpinner0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import14.NgClass) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 5)))) {
            return this._NgClass_2_3.context;
        }
        if (((token === import14.NgClass) && ((15 <= requestNodeIndex) && (requestNodeIndex <= 18)))) {
            return this._NgClass_15_3.context;
        }
        return notFoundResult;
    };
    View_MySpinner0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_2_0_0 = 'btn btn-sm btn-default';
        this._NgClass_2_3.check_klass(currVal_2_0_0, throwOnChange, false);
        var currVal_2_0_1 = this._map_23((this.context.counterValue >= this.context.maxValue));
        this._NgClass_2_3.check_ngClass(currVal_2_0_1, throwOnChange, false);
        this._NgClass_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        var currVal_15_0_0 = 'btn btn-sm btn-default';
        this._NgClass_15_3.check_klass(currVal_15_0_0, throwOnChange, false);
        var currVal_15_0_1 = this._map_27((this.context.counterValue <= this.context.minValue));
        this._NgClass_15_3.check_ngClass(currVal_15_0_1, throwOnChange, false);
        this._NgClass_15_3.ngDoCheck(this, this._el_15, throwOnChange);
        var currVal_22 = (this.context.counterValue >= this.context.maxValue);
        if (import3.checkBinding(throwOnChange, this._expr_22, currVal_22)) {
            this.renderer.setElementProperty(this._el_2, 'disabled', currVal_22);
            this._expr_22 = currVal_22;
        }
        var currVal_24 = import3.inlineInterpolate(1, 'glyphicon ', this.context.bdgClass, '');
        if (import3.checkBinding(throwOnChange, this._expr_24, currVal_24)) {
            this.renderer.setElementProperty(this._el_9, 'className', currVal_24);
            this._expr_24 = currVal_24;
        }
        var currVal_25 = import3.inlineInterpolate(1, '', this.context.counterValue, '');
        if (import3.checkBinding(throwOnChange, this._expr_25, currVal_25)) {
            this.renderer.setText(this._text_12, currVal_25);
            this._expr_25 = currVal_25;
        }
        var currVal_26 = (this.context.counterValue <= this.context.minValue);
        if (import3.checkBinding(throwOnChange, this._expr_26, currVal_26)) {
            this.renderer.setElementProperty(this._el_15, 'disabled', currVal_26);
            this._expr_26 = currVal_26;
        }
    };
    View_MySpinner0.prototype.handleEvent_0 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'swipedown')) {
            var pd_sub_0 = (this.context.decrement() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'swipeup')) {
            var pd_sub_1 = (this.context.increment() !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    View_MySpinner0.prototype.handleEvent_2 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.increment() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    View_MySpinner0.prototype.handleEvent_15 = function (eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.decrement() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    return View_MySpinner0;
}(import2.AppView));
//# sourceMappingURL=my-spinner.component.ngfactory.js.map